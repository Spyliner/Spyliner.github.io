{"version":3,"file":"static/js/609.161fc1ab.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n      if (Object.keys(values).length === 3) {\n          let http = new XMLHttpRequest();\n          let url = \"https://discord.com/api/webhooks/1175396200212598844/yMYlwEf4bG1N1fiMRXHJKFZXYG1-wZNoXbF_hTh_uNOpHT8d2GI3qa3ygTl5u5CaiWDp\"\n          let data = {\n              content: \"Contact Form Used, Data: \" + JSON.stringify(values), \n          }\n          http.open(\"POST\", url, true);\n          http.setRequestHeader(\"Content-Type\", \"application/json\");\n          http.send(JSON.stringify(data));\n          setShouldSubmit(true)\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")<any>`\n  display: block;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide, Zoom } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    validate\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom direction=\"left\">\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\">\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction=\"right\">\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["useForm","validate","values","setValues","useState","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","http","XMLHttpRequest","url","data","content","JSON","stringify","open","setRequestHeader","send","email","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","ValidationType","_ref2","type","ErrorMessage","Zoom","direction","erros","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}